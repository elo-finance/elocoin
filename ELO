pragma solidity ^0.8.2;
/*
*
* 
*
*       ________   _____         ___________    __________      ___________  ____________    _____  ____
*      / ______/  /    /        /    ___   /   /  _______/     /   ___    / /____   ____/   /    / /   /
*     / /____    /    /        /   /  /   /   /  /            /   /  /   /      /  /       /    / /   /
*    / ______/  /    /        /   /__/   /   /  /            /   /__/   /      /  /       /  /\ \/   /
*   / /_____   /    /______  /          /   /  /_________   /          /  ____/  /____   /  /  \    /
*  /_______/  /___________/ /__________/   /____________/  /__________/  /___________/  /__/    \__/
*
*
*
*
*
By Navarro & Navarro,2021
______________________________________________________________

@dev CNC

In crypto we trust

Real crypto value:
_________________________________________________________________

*/

contract Token {
    mapping(address => uint) public balances;
    mapping(address => mapping(address => uint)) public allowance;
    
    uint public totalSupply = 210000000 * 10 ** 18;
    string public name = "ELOCOIN";
    string public symbol = "ELO";
    uint public decimals = 18;
    
    event Transfer(address indexed from, address indexed to, uint value);
    event Aprroval(address indexed owner, address indexed spender, uint value);
    
    constructor() {
        
    balances[msg.sender] = totalSupply;
        
    }
    
    function balanceOf(address owner) public view returns(uint) {
        return balances[owner];
    }

    function transfer(address to, uint value) public returns(bool){
        require(balanceOf(msg.sender) >= value, 'balance too low');
        balances[to] += value; 
        balances[msg.sender] -= value;
        emit Transfer(msg.sender, to, value);
        return true;
    }
    function transferFrom(address from, address to, uint value) public returns(bool) {
        require(balanceOf(from) >= value, 'balance too low');
        require(allowance[from][msg.sender] >= value, 'allowance too low');
        balances[from] -= value;
        emit Transfer(from, to, value);
        return true;
    }
    
    function approve(address spender, uint value) public returns(bool) {
        allowance[msg.sender][spender] = value;
        emit Aprroval(msg.sender, spender, value);
        return true;
        
    }
}
